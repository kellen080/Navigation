<?xml version="1.0"?>
<launch>
   
    <arg name="localization" default="false"/>
    <arg name="rtabmapviz"   default="true"/>
    <arg name="ground_truth" default="false"/>
    
    <arg     if="$(arg localization)" name="pre_args" default=""/>
    <arg unless="$(arg localization)" name="pre_args" default=""/>
   
    <node pkg="nodelet" type="nodelet" name="imu_to_tf" args="standalone rtabmap_ros/imu_to_tf">
      <remap from="imu/data" to="/mavros/imu/data"/>
      <param name="fixed_frame_id" value="base_link_stabilized"/>
      <param name="base_frame_id" value="base_link"/>
    </node>

    <!-- To connect rtabmap planning stuff with move_base below -->
    <param name="/rtabmap/rtabmap/use_action_for_goal" value="true"/>
    <remap from="/rtabmap/move_base" to="/move_base"/>

    <param name="/rtabmap/rtabmap/map_always_update" value="false"/>
    <!-- <param name="/rtabmap/rtabmap/map_always_update" value="true"/> -->

    <!-- VSLAM -->
    <param name="/rtabmap/rtabmap/latch" value="false"/> <!-- For some reason, if we latch grid_map, the global costmap inflation layer will create holes on robot path. To avoid holes, republish grid_map on each update (latching disabled). -->
    <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
      <arg name="localization"      value="$(arg localization)"/>
      
      <arg name="rtabmapviz"        value="$(arg rtabmapviz)" /> 
      <arg name="frame_id"          value="base_link" />
      <arg name="odom_guess_frame_id" value="base_link_stabilized" />



      <arg name="rgb_topic"         value="/r200/camera/color/image_raw" />
      <arg name="depth_topic"       value="/r200/camera/depth/image_raw" />
      <arg name="camera_info_topic" value="/r200/camera/color/camera_info" />
      
      <!-- <arg name="rgb_topic"         value="/camera/color/image_raw" />
      <arg name="depth_topic"       value="/camera/aligned_depth_to_color/image_raw" />
      <arg name="camera_info_topic" value="/camera/color/camera_info" /> -->

      <!-- <arg name="rgb_topic"         value="/image/color/image_raw" />
      <arg name="depth_topic"       value="/image/aligned_depth_to_color/image_raw" />
      <arg name="camera_info_topic" value="/camera/color/camera_info" /> -->

      <!-- <arg name="rgb_topic"         value="/image/color/image_raw" />
      <arg name="depth_topic"       value="/image/aligned_depth_to_color/image_raw" />
      <arg name="camera_info_topic" value="/r200/camera/color/camera_info" /> -->
 


      <arg name="imu_topic"         value="/mavros/imu/data"/>
      <arg name="wait_imu_to_init"  value="true"/>
      <arg name="approx_sync"       value="true"/>

      <!-- <arg name="approx_sync"       value="false"/> -->
      
      <arg if="$(arg ground_truth)" name="ground_truth_frame_id" value="world"/>
      <arg if="$(arg ground_truth)" name="ground_truth_base_frame_id" value="base_link_gt"/>
    </include>
    
    <!-- Costmap -->
    <node pkg="nodelet" type="nodelet" name="camera_points_xyz" args="standalone rtabmap_ros/point_cloud_xyz">

      <remap from="depth/image"       to="/r200/camera/depth/image_raw"/>
      <remap from="depth/camera_info" to="/r200/camera/depth/camera_info"/>


      <!-- <remap from="depth/image"       to="/camera/aligned_depth_to_color/image_raw"/>
      <remap from="depth/camera_info" to="/camera/aligned_depth_to_color/camera_info"/> -->
    
      <!-- <remap from="depth/image"       to="/image/aligned_depth_to_color/image_raw"/>
      <remap from="depth/camera_info" to="/camera/aligned_depth_to_color/camera_info"/> -->

      <!-- <remap from="depth/image"       to="/image/aligned_depth_to_color/image_raw"/>
      <remap from="depth/camera_info" to="/r200/camera/depth/camera_info"/> -->
      

      <remap from="cloud"             to="camera_cloud" />

      <param name="decimation"  type="double" value="4"/>
      <param name="voxel_size"  type="double" value="0.0"/>
      
      <param name="approx_sync" type="bool"   value="true"/>

      <!-- <param name="approx_sync" type="bool"   value="false"/> -->

      
    </node> 

    <!-- navigation -->  
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
       <remap from="map" to="/rtabmap/grid_map"/>
       <remap from="odom" to="/rtabmap/odom"/>
       <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />  

       <rosparam file="$(find rtabmap_drone_example)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
       <rosparam file="$(find rtabmap_drone_example)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
       <rosparam file="$(find rtabmap_drone_example)/param/global_costmap_params.yaml" command="load" />
       <rosparam file="$(find rtabmap_drone_example)/param/local_costmap_params.yaml" command="load" />
       <rosparam file="$(find rtabmap_drone_example)/param/base_local_planner_params.yaml" command="load" />

       <!-- <rosparam file="$(find navigation_stage)/move_base_config/costmap_common_params.yaml" command="load" ns="global_costmap" />
       <rosparam file="$(find navigation_stage)/move_base_config/costmap_common_params.yaml" command="load" ns="local_costmap" />
       <rosparam file="$(find navigation_stage)/move_base_config/global_costmap_params.yaml" command="load" />
       <rosparam file="$(find navigation_stage)/move_base_config/local_costmap_params.yaml" command="load" />
       <rosparam file="$(find navigation_stage)/move_base_config/dwa_local_planner_params.yaml" command="load" />
       <rosparam file="$(find navigation_stage)/move_base_config/base_local_planner_params.yaml" command="load" /> -->

       <!-- <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_waffle.yaml" command="load" ns="global_costmap" />
       <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_waffle.yaml" command="load" ns="local_costmap" />
       <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load" />
       <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load" />
       <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load" />
       <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_waffle.yaml" command="load" /> -->

    </node>
   <node name="empty_voxels_markers" pkg="rtabmap_ros" type="voxel_markers" args="voxel_grid:=/move_base/local_costmap/voxel_layer/voxel_grid visualization_marker:=/voxels_empty">
       <param name="cell_type" value="0"/>
   </node>
   <node name="marked_voxels_markers" pkg="rtabmap_ros" type="voxel_markers" args="voxel_grid:=/move_base/local_costmap/voxel_layer/voxel_grid visualization_marker:=/voxels_marked" />

    <!-- joystick -->
    <!-- <rosparam file="$(find rtabmap_drone_example)/config/joy_config.yaml" />
    <node pkg="joy" type="joy_node" name="joy_node">
        <param name="autorepeat_rate" value="5"/>
    </node>
    <node pkg="teleop_twist_joy" type="teleop_node" name="teleop_node" output="screen">
        <param name="autorepeat_rate" value="5"/>
    </node> -->

    <!-- Ground truth -->
  <node if="$(arg ground_truth)" pkg="tf" type="static_transform_publisher" name="worldtomap_broadcaster" args="0 0 0 0 0 0 1 world map 100" />
  <node if="$(arg ground_truth)" pkg="rtabmap_ros" type="gazebo_ground_truth.py" name="gazebo_ground_truth" output="screen">
    <param name="frame_id"        value="world"/>
    <param name="child_frame_id"  value="base_link_gt"/>
    <param name="gazebo_frame_id" value="drone::base_link"/>
  </node>
    <!-- Change -->
  <node pkg="tf" type="static_transform_publisher" name="camera_to_fcu" args="0 0 0 0 0 0 1 base_link camera_link 10"/>
  
  
  
</launch>
